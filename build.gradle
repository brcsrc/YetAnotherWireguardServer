
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'de.undercouch.download' version '4.1.1'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.brcsrc'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

dependencies {
	// http and api documentation
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// persistence
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'javax.persistence:javax.persistence-api:2.2'
	implementation 'org.xerial:sqlite-jdbc:3.45.1.0'
	implementation 'org.hibernate.orm:hibernate-community-dialects:6.3.1.Final'

	// testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

// create local dir 'lib' and run ./gradlew copyDependenciesToLocalRepo
task copyDependenciesToLocalRepo(type: Copy) {
	from configurations.runtimeClasspath
	into 'lib'
}

// caches gradle to speed up docker container build
task downloadGradleBin(type: Download) {
	src 'https://services.gradle.org/distributions/gradle-8.7-bin.zip'  // URL of the Gradle distribution
	dest new File(project.rootDir, 'gradle/wrapper/gradle-8.7-bin.zip')
	overwrite false
}

repositories {
	flatDir {
		dirs 'lib'
	}
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

// make test runs log output only on test failures
tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events("passed", "failed") 		// test result types passed to events() will be logged. other options: "skipped", "standard_out", "standard_error"
		exceptionFormat = "full"  		// This ensures that the full stack trace is shown
		showStandardStreams = false  	// Optional: Shows standard output (useful for logging)

		afterTest { descriptor, result ->
			if (result.getResultType() == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
				testLogging.showStandardStreams = true
				println("‚ùå Test failed: ${descriptor.name}")
			} else {
				testLogging.showStandardStreams = false
			}
		}
	}
}

task checkJarExists {
	doLast {
		def jarFile = file('build/libs/yaws-0.0.1-SNAPSHOT.jar')
		if (!jarFile.exists()) {
			configurations.runtimeClasspath.resolve()
		}
	}
}
test.dependsOn checkJarExists

