/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Client,
  CreateNetworkClientRequest,
  ListNetworkClientsRequest,
  NetworkClient,
} from '../models/index';
import {
    ClientFromJSON,
    ClientToJSON,
    CreateNetworkClientRequestFromJSON,
    CreateNetworkClientRequestToJSON,
    ListNetworkClientsRequestFromJSON,
    ListNetworkClientsRequestToJSON,
    NetworkClientFromJSON,
    NetworkClientToJSON,
} from '../models/index';

export interface CreateNetworkClientOperationRequest {
    createNetworkClientRequest: CreateNetworkClientRequest;
}

export interface DeleteNetworkClientRequest {
    networkName: string;
    clientName: string;
}

export interface DescribeNetworkClientRequest {
    networkName: string;
    clientName: string;
}

export interface GetNetworkClientConfigFileRequest {
    networkName: string;
    clientName: string;
}

export interface ListNetworkClientsOperationRequest {
    listNetworkClientsRequest: ListNetworkClientsRequest;
}

/**
 * 
 */
export class NetworkClientControllerApi extends runtime.BaseAPI {

    /**
     * create a client for a specific network
     * Create Network Client
     */
    async createNetworkClientRaw(requestParameters: CreateNetworkClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkClient>> {
        if (requestParameters['createNetworkClientRequest'] == null) {
            throw new runtime.RequiredError(
                'createNetworkClientRequest',
                'Required parameter "createNetworkClientRequest" was null or undefined when calling createNetworkClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNetworkClientRequestToJSON(requestParameters['createNetworkClientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkClientFromJSON(jsonValue));
    }

    /**
     * create a client for a specific network
     * Create Network Client
     */
    async createNetworkClient(requestParameters: CreateNetworkClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkClient> {
        const response = await this.createNetworkClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a specific client for a network
     * Delete Network Client
     */
    async deleteNetworkClientRaw(requestParameters: DeleteNetworkClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkClient>> {
        if (requestParameters['networkName'] == null) {
            throw new runtime.RequiredError(
                'networkName',
                'Required parameter "networkName" was null or undefined when calling deleteNetworkClient().'
            );
        }

        if (requestParameters['clientName'] == null) {
            throw new runtime.RequiredError(
                'clientName',
                'Required parameter "clientName" was null or undefined when calling deleteNetworkClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clients/{networkName}/{clientName}`.replace(`{${"networkName"}}`, encodeURIComponent(String(requestParameters['networkName']))).replace(`{${"clientName"}}`, encodeURIComponent(String(requestParameters['clientName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkClientFromJSON(jsonValue));
    }

    /**
     * delete a specific client for a network
     * Delete Network Client
     */
    async deleteNetworkClient(requestParameters: DeleteNetworkClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkClient> {
        const response = await this.deleteNetworkClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * describe a specific client for a specific network
     * Describe Network Clients
     */
    async describeNetworkClientRaw(requestParameters: DescribeNetworkClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkClient>> {
        if (requestParameters['networkName'] == null) {
            throw new runtime.RequiredError(
                'networkName',
                'Required parameter "networkName" was null or undefined when calling describeNetworkClient().'
            );
        }

        if (requestParameters['clientName'] == null) {
            throw new runtime.RequiredError(
                'clientName',
                'Required parameter "clientName" was null or undefined when calling describeNetworkClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clients/{networkName}/{clientName}`.replace(`{${"networkName"}}`, encodeURIComponent(String(requestParameters['networkName']))).replace(`{${"clientName"}}`, encodeURIComponent(String(requestParameters['clientName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkClientFromJSON(jsonValue));
    }

    /**
     * describe a specific client for a specific network
     * Describe Network Clients
     */
    async describeNetworkClient(requestParameters: DescribeNetworkClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkClient> {
        const response = await this.describeNetworkClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get a networkclient configuration .conf file for a client on a given network to be downloadable
     * Get Network Client Configuration File
     */
    async getNetworkClientConfigFileRaw(requestParameters: GetNetworkClientConfigFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['networkName'] == null) {
            throw new runtime.RequiredError(
                'networkName',
                'Required parameter "networkName" was null or undefined when calling getNetworkClientConfigFile().'
            );
        }

        if (requestParameters['clientName'] == null) {
            throw new runtime.RequiredError(
                'clientName',
                'Required parameter "clientName" was null or undefined when calling getNetworkClientConfigFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clients/{networkName}/{clientName}/config`.replace(`{${"networkName"}}`, encodeURIComponent(String(requestParameters['networkName']))).replace(`{${"clientName"}}`, encodeURIComponent(String(requestParameters['clientName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * get a networkclient configuration .conf file for a client on a given network to be downloadable
     * Get Network Client Configuration File
     */
    async getNetworkClientConfigFile(requestParameters: GetNetworkClientConfigFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getNetworkClientConfigFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list clients for a specific network
     * List Network Clients
     */
    async listNetworkClientsRaw(requestParameters: ListNetworkClientsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Client>>> {
        if (requestParameters['listNetworkClientsRequest'] == null) {
            throw new runtime.RequiredError(
                'listNetworkClientsRequest',
                'Required parameter "listNetworkClientsRequest" was null or undefined when calling listNetworkClients().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['listNetworkClientsRequest'] != null) {
            queryParameters['listNetworkClientsRequest'] = requestParameters['listNetworkClientsRequest'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientFromJSON));
    }

    /**
     * list clients for a specific network
     * List Network Clients
     */
    async listNetworkClients(requestParameters: ListNetworkClientsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Client>> {
        const response = await this.listNetworkClientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
