/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListNetworksRequest,
  ListNetworksResponse,
  Network,
  UpdateNetworkRequest,
} from '../models/index';
import {
    ListNetworksRequestFromJSON,
    ListNetworksRequestToJSON,
    ListNetworksResponseFromJSON,
    ListNetworksResponseToJSON,
    NetworkFromJSON,
    NetworkToJSON,
    UpdateNetworkRequestFromJSON,
    UpdateNetworkRequestToJSON,
} from '../models/index';

export interface CreateNetworkRequest {
    network: Network;
}

export interface DeleteNetworkRequest {
    networkName: string;
}

export interface DescribeNetworkRequest {
    networkName: string;
}

export interface ListNetworksOperationRequest {
    listNetworksRequest: ListNetworksRequest;
}

export interface UpdateNetworkOperationRequest {
    networkName: string;
    updateNetworkRequest: UpdateNetworkRequest;
}

/**
 * 
 */
export class NetworkControllerApi extends runtime.BaseAPI {

    /**
     * create a network
     * Create Network
     */
    async createNetworkRaw(requestParameters: CreateNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Network>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling createNetwork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/networks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NetworkToJSON(requestParameters['network']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkFromJSON(jsonValue));
    }

    /**
     * create a network
     * Create Network
     */
    async createNetwork(requestParameters: CreateNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Network> {
        const response = await this.createNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a network
     * Delete Network
     */
    async deleteNetworkRaw(requestParameters: DeleteNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Network>> {
        if (requestParameters['networkName'] == null) {
            throw new runtime.RequiredError(
                'networkName',
                'Required parameter "networkName" was null or undefined when calling deleteNetwork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/networks/{networkName}`.replace(`{${"networkName"}}`, encodeURIComponent(String(requestParameters['networkName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkFromJSON(jsonValue));
    }

    /**
     * delete a network
     * Delete Network
     */
    async deleteNetwork(requestParameters: DeleteNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Network> {
        const response = await this.deleteNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * describe a network
     * Describe Network
     */
    async describeNetworkRaw(requestParameters: DescribeNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Network>> {
        if (requestParameters['networkName'] == null) {
            throw new runtime.RequiredError(
                'networkName',
                'Required parameter "networkName" was null or undefined when calling describeNetwork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/networks/{networkName}`.replace(`{${"networkName"}}`, encodeURIComponent(String(requestParameters['networkName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkFromJSON(jsonValue));
    }

    /**
     * describe a network
     * Describe Network
     */
    async describeNetwork(requestParameters: DescribeNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Network> {
        const response = await this.describeNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all networks with pagination
     * List Networks
     */
    async listNetworksRaw(requestParameters: ListNetworksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListNetworksResponse>> {
        if (requestParameters['listNetworksRequest'] == null) {
            throw new runtime.RequiredError(
                'listNetworksRequest',
                'Required parameter "listNetworksRequest" was null or undefined when calling listNetworks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/networks/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListNetworksRequestToJSON(requestParameters['listNetworksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNetworksResponseFromJSON(jsonValue));
    }

    /**
     * list all networks with pagination
     * List Networks
     */
    async listNetworks(requestParameters: ListNetworksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListNetworksResponse> {
        const response = await this.listNetworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update the tag or status of a network
     * Update Network
     */
    async updateNetworkRaw(requestParameters: UpdateNetworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Network>> {
        if (requestParameters['networkName'] == null) {
            throw new runtime.RequiredError(
                'networkName',
                'Required parameter "networkName" was null or undefined when calling updateNetwork().'
            );
        }

        if (requestParameters['updateNetworkRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNetworkRequest',
                'Required parameter "updateNetworkRequest" was null or undefined when calling updateNetwork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/networks/{networkName}`.replace(`{${"networkName"}}`, encodeURIComponent(String(requestParameters['networkName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNetworkRequestToJSON(requestParameters['updateNetworkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkFromJSON(jsonValue));
    }

    /**
     * update the tag or status of a network
     * Update Network
     */
    async updateNetwork(requestParameters: UpdateNetworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Network> {
        const response = await this.updateNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
