/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Network
 */
export interface Network {
    /**
     * unique, alphanumeric, 1-64 character name for the network
     * @type {string}
     * @memberof Network
     */
    networkName: string;
    /**
     * CIDR block for the network
     * @type {string}
     * @memberof Network
     */
    networkCidr: string;
    /**
     * server listen port for the network
     * @type {number}
     * @memberof Network
     */
    networkListenPort: number;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    networkPrivateKeyName?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    networkPublicKeyName?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    networkTag?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    networkStatus?: NetworkNetworkStatusEnum;
}


/**
 * @export
 */
export const NetworkNetworkStatusEnum = {
    Created: 'CREATED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    Deleted: 'DELETED'
} as const;
export type NetworkNetworkStatusEnum = typeof NetworkNetworkStatusEnum[keyof typeof NetworkNetworkStatusEnum];


/**
 * Check if a given object implements the Network interface.
 */
export function instanceOfNetwork(value: object): value is Network {
    if (!('networkName' in value) || value['networkName'] === undefined) return false;
    if (!('networkCidr' in value) || value['networkCidr'] === undefined) return false;
    if (!('networkListenPort' in value) || value['networkListenPort'] === undefined) return false;
    return true;
}

export function NetworkFromJSON(json: any): Network {
    return NetworkFromJSONTyped(json, false);
}

export function NetworkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Network {
    if (json == null) {
        return json;
    }
    return {
        
        'networkName': json['networkName'],
        'networkCidr': json['networkCidr'],
        'networkListenPort': json['networkListenPort'],
        'networkPrivateKeyName': json['networkPrivateKeyName'] == null ? undefined : json['networkPrivateKeyName'],
        'networkPublicKeyName': json['networkPublicKeyName'] == null ? undefined : json['networkPublicKeyName'],
        'networkTag': json['networkTag'] == null ? undefined : json['networkTag'],
        'networkStatus': json['networkStatus'] == null ? undefined : json['networkStatus'],
    };
}

export function NetworkToJSON(json: any): Network {
    return NetworkToJSONTyped(json, false);
}

export function NetworkToJSONTyped(value?: Network | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'networkName': value['networkName'],
        'networkCidr': value['networkCidr'],
        'networkListenPort': value['networkListenPort'],
        'networkPrivateKeyName': value['networkPrivateKeyName'],
        'networkPublicKeyName': value['networkPublicKeyName'],
        'networkTag': value['networkTag'],
        'networkStatus': value['networkStatus'],
    };
}

